<?php

/***********************************************************************************/
/*** Administration of Business Rules seection *************************************/
/***********************************************************************************/
/**
 * Save an entry in the database.
 * Save an entry in the database.
 * Save an entry in the database.
 *
 * The underlying DBTNG function is db_insert().
 *
 * Exception handling is shown in this example. It could be simplified
 * without the try/catch blocks, but since an insert will throw an exception
 * and terminate your application if the exception is not handled, it is best
 * to employ try/catch.
 *
 * @param $entry
 *   An array containing all the fields of the database record.
 *
 * @see db_insert()
 */
function rc_res_full_entry_insert($entry) {
  $return_value = NULL;
  try {
    $return_value = db_insert('rc_res_full')
                    ->fields($entry)
                    ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_insert failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $return_value;
}

/**
 * Update an entry in the database.
 * Update an entry in the database.
 * Update an entry in the database.
 *
 * The former, deprecated techniques used db_query() or drupal_write_record():
 * @code
 *  drupal_write_record('rc_res_full', $entry, $entry['pid']);
 * @endcode
 *
 * @code
 *  db_query(
 *    "UPDATE {rc_res_full}
 *     SET name = '%s', surname = '%s', age = '%d'
 *     WHERE pid = %d",
 *     $entry['pid']
 *  );
 * @endcode
 *
 * @param $entry
 *   An array containing all the fields of the item to be updated.
 *
 * @see db_update()
 */
function rc_res_full_entry_update($entry) {
  try {
    // db_update()...->execute() returns the number of rows updated.
    $count = db_update('rc_res_full')
              ->fields($entry)
              ->condition('pid', $entry['pid'])
              ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_update failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $count;
}

/**
 * Delete an entry from the database.
 * Delete an entry from the database.
 * Delete an entry from the database.
 *
 * The usage of db_query is deprecated except for static queries.
 * Formerly, a deletion might have been accomplished like this:
 * @code
 *  db_query("DELETE FROM {rc_res_full} WHERE pid = %d", $entry['pid]);
 * @endcode
 *
 * @param $entry
 *   An array containing at least the person identifier 'pid' element of the
 *   entry to delete.
 *
 * @see db_delete()
 */
function rc_res_full_entry_delete($table,$entry) {
  db_delete($table)
    ->condition('pid', $entry['pid'])
    ->execute();
}

/**
 * Read from the database using a filter array.
 * Read from the database using a filter array.
 * Read from the database using a filter array.
 *
 * In Drupal 6, the standard function to perform reads was db_query(), and
 * for static queries, it still is.
 *
 * db_query() used an SQL query with placeholders and arguments as parameters.
 *
 * @code
 *  // Old way
 *  $query = "SELECT * FROM {rc_res_full} n WHERE n.uid = %d AND name = '%s'";
 *  $result = db_query($query, $uid, $name);
 * @endcode
 *
 * Drupal 7 DBTNG provides an abstracted interface that will work with a wide
 * variety of database engines.
 *
 * db_query() is deprecated except when doing a static query. The following is
 * perfectly acceptable in Drupal 7. See
 * @link http://drupal.org/node/310072 the handbook page on static queries @endlink
 *
 * @code
 *   // SELECT * FROM {rc_res_full} WHERE uid = 0 AND name = 'John'
 *   db_query(
 *     "SELECT * FROM {rc_res_full} WHERE uid = :uid and name = :name",
 *     array(':uid' => 0, ':name' => 'John')
 *   )->execute();
 * @endcode
 *
 * But for more dynamic queries, Drupal provides the db_select()
 * API method, so there are several ways to perform the same SQL query.
 * See the @link http://drupal.org/node/310075 handbook page on dynamic queries. @endlink
 *
 * @code
 *   // SELECT * FROM {rc_res_full} WHERE uid = 0 AND name = 'John'
 *   db_select('rc_res_full')
 *     ->fields('rc_res_full')
 *     ->condition('uid', 0)
 *     ->condition('name', 'John')
 *     ->execute();
 * @endcode
 *
 * Here is db_select with named placeholders:
 * @code
 *   // SELECT * FROM {rc_res_full} WHERE uid = 0 AND name = 'John'
 *   $arguments = array(':name' => 'John', ':uid' => 0);
 *   db_select('rc_res_full')
 *     ->fields('rc_res_full')
 *     ->where('uid = :uid AND name = :name', $arguments)
 *     ->execute();
 * @endcode
 *
 * Conditions are stacked and evaluated as AND and OR depending on the type of
 * query. For more information, read the conditional queries handbook page at:
 * http://drupal.org/node/310086
 *
 * The condition argument is an 'equal' evaluation by default, but this can be
 * altered:
 * @code
 *   // SELECT * FROM {rc_res_full} WHERE age > 18
 *   db_select('rc_res_full')
 *     ->fields('rc_res_full')
 *     ->condition('age', 18, '>')
 *     ->execute();
 * @endcode
 *
 * @param $entry
 *   An array containing all the fields used to search the entries in the table.
 * @return
 *   An object containing the loaded entries if found.
 *
 * @see db_select()
 * @see db_query()
 * @see http://drupal.org/node/310072
 * @see http://drupal.org/node/310075
 *
 */
function rc_res_full_entry_load($entry = array()) {
  // Read all fields from the rc_res_full table.
  $select = db_select('rc_res_full', 'example');
  $select->fields('example');

  // Add each field and value as a condition to this query.
  foreach ($entry as $field => $value) {
    $select->condition($field, $value);
  }
  // Return the result in object format.
  return $select->execute()->fetchAll();
}
/***********************************************************************************/
/*** END Administration of Business Rules seection *********************************/
/***********************************************************************************/









/**
 * Master validation function for the customer survey form - uses per-stage 
 * validation and calls functions for each one.
 * 
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function rc_res_full_form_page_one_validate($form, &$form_state) {
  $checkboxErrorMsg1 = 'Please select a checkbox before clicking on the Delete button111.';
  $checkboxErrorMsg2 = 'Please select a checkbox before clicking on the Delete button222.';
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 3) {
    if (!empty($form_state['values']['op']) && $form_state['values']['op'] == 'Delete') {
      if (!empty($form_state['values'][0])) {
	$oneChecked = 0;
	for ($i=0; $i<=sizeof($form_state['values'][0]); $i++){ // note that the length may be greater than sizeof if rom 0 is disabled; loop 1 extra time; the !empty prevents problems if n+1 does not exist
	  if( isset($form_state['values'][0][$i]) ){ // use isset instead of !empty to see if an array element exitss
	    if( $form_state['values'][0][$i]>=1 || ($form_state['values'][0][$i] == '0' && is_string($form_state['values'][0][$i])) ){
    	      $oneChecked = 1;
	    }
	  }
	}
	if( $oneChecked != 1 ){
	  form_set_error('', $checkboxErrorMsg1);
	}
      } else {
	    form_set_error('', $checkboxErrorMsg2);
      }
    }
  } else if (!empty($form_state['page_num']) && $form_state['page_num'] == 6) {
    if (!$form_state['values']['user_email']) {
      form_set_error('user_email', 'Please enter an email address.');
    }
    if (!$form_state['values']['user_dept']) {
      form_set_error('user_dept', 'Please enter the Department or Major associated with this request.');
    }
  }
}











/***********************************************************************************/
/*** Research Commons Reservation Module *******************************************/
/***********************************************************************************/
/**
 * Implements hook_menu().
 * Implements hook_menu().
 * Implements hook_menu().
 *
 * Set up calls to drupal_get_form() for all our example cases.
 */
function rc_res_full_menu() {
  global $user;
  global $rc_res_full_get_user_category;
  
  $items = array();
  $items['libraries/researchlibrary/research-commons-reservation'] = array(
  //$items['examples/rc_res_full'] = array( // old path
    'title' => 'RC-Res Reservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rc_res_full_form_page_one'),
    'access callback' => TRUE,
    'menu_name' => 'navigation',
  );
  $items['libraries/researchlibrary/rc_res_full2'] = array(
    'title' => 'RC-Res Reservations222',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rc_res_full_form_page_one'),
    'access callback' => TRUE,
    'menu_name' => 'rc-res-menutest',
  );
  return $items;
}

/**
 * Render a list of entries in the database.
 * Render a list of entries in the database.
 * Render a list of entries in the database.
 */
function rc_res_full_list() {
  $output = '';

  // Get all entries in the rc_res_full table.
  if ($entries = rc_res_full_entry_load()) {
    $rows = array();
    foreach ($entries as $entry) {
      // Sanitize the data before handing it off to the theme layer.
      $rows[] = array_map('check_plain', (array) $entry);
    }
    // Make a table for them.
    $header = array(t('Id'), t('Uid'), t('User Name'), t('User Pwd'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    drupal_set_message(t('No entries have been added yet.'));
  }
  return $output;
}

/**
 * Create a form to add an entry, ......................................................................................................................
 * Create a form to add an entry, ......................................................................................................................
 * Create a form to add an entry, ......................................................................................................................
 */

/**
 * page 1 ......................................................................................................................
 * page 1 ......................................................................................................................
 * page 1 ......................................................................................................................
 */
function rc_res_full_form_page_one($form, &$form_state) {

global $user;



print_r(variable_get("shib_auth_full_logout_url"));




$rc_user = user_load($user->uid);
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary
  // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
//print_r('page_2');
    return rc_res_full_form_page_two($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 3) {
//print_r('page_3');
    return rc_res_full_form_page_three($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 4) {
//print_r('page_4');
    return rc_res_full_form_page_four($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 5) {
//print_r('page_5');
    return rc_res_full_form_page_five($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 6) {
//print_r('page_6');
    return rc_res_full_form_page_six($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 7) {
//print_r('page_7');
    return rc_res_full_form_page_seven($form, $form_state);
  }

  // Otherwise we build page 1.
  // Otherwise we build page 1.
  // Otherwise we build page 1.

//print_r($user);
//print_r($user->uid." ");
//print_r($user->name." ");
//print_r($user->field_user_full_name);
//krumo($user);
  
variable_set('no_res_available', 0); // used to indicate that no reservations are available after submitting page 4

  //retrieve user first and last name from the $user->field_user_full_name that was set on Shibboleth login
  if (!empty($rc_user->field_user_full_name['und'][0]['value'])){
    if (preg_match("/\|\|\|/", $rc_user->field_user_full_name['und'][0]['value'])) {
      $names = explode("|||", $rc_user->field_user_full_name['und'][0]['value']);
      variable_set('name_first', $names[0]);
      variable_set('name_last', $names[1]);
    }else{
      $names = explode(", ", $rc_user->field_user_full_name['und'][0]['value']);
      variable_set('name_last', $names[0]);
      variable_set('name_first', $names[1]);
    }
  }else{
    $names = explode("|||", "Name|||unavailable");
  }

  // build form for page
  //  $form_state['page_num'] = 1;
  $form = array();

  $form['description'] = array(
    '#type'  => 'item',
    '#title' => t('Welcome '.variable_get('name_first').' '.variable_get('name_last').'<br>You have successfully signed in using Shibboleth.'),
  );

  $form['test'] = array(
    '#type'  => 'checkboxes',
    '#options' => drupal_map_assoc(  array( t('Test - checking this checkbox allows deletion of an expired reservation before 24 hours has passed') )  ),
  );

  $form['next'] = array(
    '#type'  => 'submit',
    '#value' => t('Next'),
    '#submit' => array('rc_res_full_form_page_one_handler_submit'),
  );

global $user;
//print_r($user);
// print_r( $user->name );
//krumo($user);

  return $form;
}

/**
 * page 2 ......................................................................................................................
 * page 2 ......................................................................................................................
 * page 2 ......................................................................................................................
 */
function rc_res_full_form_page_two($form, &$form_state) {
  // Build page 2.
  // Build page 2.
  // Build page 2.

// drupal_set_message(t("User category: " . variable_get('rc_res_full_get_user_category') ));
// drupal_set_message(t("User ID: " . variable_get('working_uid') ));

  $form = array();

  $form['reservation_type'] = array(
    '#type' => 'radios',
    '#options' => array(
      'studyroom_or_pod'   => t('Reserve a Group Study Room or Collaboration Pod.'),
      'classroom_or_alcove_or_multi' => t('Reserve a Classroom or Alcove, or reserve multiple spaces at the same time.'),
    ),
    '#title' => t('Start your Reservation'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Next'),
    '#submit' => array('rc_res_full_form_page_two_handler_submit'),
  );
  return $form;
}


/**
 * page 3 ......................................................................................................................
 * page 3 ......................................................................................................................
 * page 3 ......................................................................................................................
 */
function rc_res_full_form_page_three($form, &$form_state) {

  $GLOBALS['conf']['cache']=FALSE;
  global $user;
  variable_set('firstAccess4', 0);
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary
  // Jump to appropriate page if necessary

// Display page 2 if $form_state['page_num'] == 2
//  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
//    return rc_res_full_form_page_two($form, $form_state);
//  }
//  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 3) {
//    return rc_res_full_form_page_three($form, $form_state);
//  }


  if (!empty($form_state['page_num']) && $form_state['page_num'] == 4) {
print_r('page_44');
    return rc_res_full_form_page_four($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 5) {
print_r('page_55');
    return rc_res_full_form_page_five($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 6) {
print_r('page_66');
    return rc_res_full_form_page_six($form, $form_state);
  }
  elseif (!empty($form_state['page_num']) && $form_state['page_num'] == 7) {
print_r('page_77');
    return rc_res_full_form_page_seven($form, $form_state);
  }

  // Otherwise we build page 1.
  // Otherwise we build page 1.
  // Otherwise we build page 1.

//dhc_change: improve this to work on a shibboleth system with a matching user. ie both shib user and drupal user, possibly with same username
// retrieve the UCLA UID (not drupal uid)

  if ( $user->name == "darrowco" ) {
    $working_uid = '502673598'; // insert darrowco's uid if drupal user darrowco is running this code on a non-shibboleth workstation
  }else{
    $working_uid = $user->name;
  }
  variable_set('working_uid', $working_uid);


//print_r($user->name);
//print_r($working_uid);


//  if (!empty($user->name) && $user->name!=0 && $user->name!=1 && $user->name!="darrowco") {
//    $working_uid = $user->name;
//  }else{
//    $working_uid = '502673598'; // insert uid if running this code on a non-shibboleth workstation
//  }
//  variable_set('working_uid', $working_uid);

//print_r($working_uid);

  // get user category here
  $rc_res_full_get_user_category = rc_res_full_get_user_category($working_uid);
  variable_set('rc_res_full_get_user_category', $rc_res_full_get_user_category);

  // get category rules here
  $rc_res_full_get_user_rules = rc_res_full_get_user_rules($rc_res_full_get_user_category);
  variable_set('rc_res_full_get_user_rules', $rc_res_full_get_user_rules);

  // retrieve the policy rules previously saved in the rules table
  $my_kvar = variable_get('rc_res_full_get_user_rules');

  // get the number of items the current category of user is allowed to reserve into the future - typically either 1 or 3
  $my_advance = $my_kvar[0]['cls_adv'];
  $my_resv_lim = $my_kvar[0]['time_per'];
  $my_fresv_max = $my_resv_lim;
  // convert hours to days
  $my_advance_days = $my_advance/24;
  $my_advance_seconds = $my_advance*3600;

  // build string for setting the date for the earliest time that a new reservation may be made
  $earliest_new_reservation_inc = ' +'.$my_advance_days.' day';

//  $my_fresv_max = $my_advance/$my_resv_lim;

  // get the current date/time of the DrupalTest server
  $nowDate = strtotime("now");
  $earliest_new_reservation = strtotime("now".$earliest_new_reservation_inc); //dhc_change move this to just before needing it so that it is set at the time the user clicks on a button dhcdhcdhc
  $startDatePast = array();
  $startDateFuture = array();
  $startDateLatest = array();

  // read any reservations given a UID
  $rows = array();
  $rows = rc_res_full_get_user_reservations($working_uid);

  // set header for the form
  $header = array
  (
    'roomName' => t('Room Name'),
    'startDate' => t('Start'),
    'endDate' => t('End'),
  );

  // Initialize an empty array for the row(s) of reservations just returned from the Resource Scheduler db
  $options = array();
 
  // Use this in the tableselect to set the initial vals for the radio buttons
  $values = array();

  $lcnt = 0;
  $startDateFutureCnt = 0;
  $startDatePastCnt = 0;
  // check to verify that at least on row was obtained
  $deleteFlag = 0;
  $waitFlag = 0;
  $waitFlagOnly = 0;

  // Set defaults to enable the form displayed to the user
  $myRow = 1;
  $myDelete = 1;
  $myNext = 1;
  $myMax = 0;



  // if at least one row was returned, loop through each row  
  // if at least one row was returned, loop through each row  
  // if at least one row was returned, loop through each row  
  if (!empty($rows['reservation'])) {
    foreach($rows['reservation'] as $row) {
      // each element of the array is keyed with the lcnt
      $options[$lcnt]['roomName'] = $row['roomName'];
      $options[$lcnt]['startDate'] = $row['startDate'];
      $options[$lcnt]['endDate'] = $row['endDate'];
      $options[$lcnt]['schedID'] = $row['schedID'];
      // set the initial vals for the radio buttons
      $values[$lcnt] = 0;
      // keep count of number of rows
      $lcnt += 1;

      // save any expired reservation; only one should exist and it should be within the last 24 hours (detection of expired reservation and period in which to detect is set in the web services call)
      $curRowDate = strtotime($row['startDate']);

  //dhc - temp if temp checkbox is checked, disregard rules
  if (empty($form_state['input']['test']['Test - checking this checkbox allows deletion of an expired reservation before 24 hours has passed'])){

//dhc - temp disable with if(0) for development  
if(1){

	///// START: business rules
	///// START: business rules
	///// START: business rules
	if( $curRowDate > $nowDate){
	  $startDateFuture = $curRowDate;
	  $startDateFutureCnt += 1;
	  if( $startDatePastCnt > 0 ){
	    if( $my_resv_lim == 1 ){
		print_r('ERROR - call Darrow Cole at Library IT 310-206-5565');
	    } else if( $lcnt < $my_resv_lim ){
	      $myRow = 0; // note: build $myRow[] array if the rules change so that more than one item can be in the expired list
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  } else {
	    if( $my_resv_lim == 1 ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 0;
	    } else if( $lcnt < $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  }
	} else if( $curRowDate <= $nowDate){
	  $startDatePast = $curRowDate;
	  $startDatePastCnt += 1;
	  if( $startDateFutureCnt > 0 ){
	    if( $my_resv_lim == 1 ){
		print_r('ERROR - call Darrow Cole at Library IT 310-206-5565');
	    } else if( $lcnt < $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
//	      $myRow = 1;
	      $myDelete = 1;
	      $myNext = 0;
	    }
	  } else {
	    if( $my_resv_lim == 1 ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 0;
	      $myMax = 1;
	      $earliest_new_reservation_lim1 = $curRowDate + $my_advance_seconds;
	    } else if( $lcnt < $my_resv_lim ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 1;
	    } else if( $lcnt >= $my_resv_lim ){
	      $myRow = 0;
	      $myDelete = 0;
	      $myNext = 0;
	      $myMax = 1;
	    }
	  }
	}
	// END: business rules
	// END: business rules
	// END: business rules
}
//dhc - END: temp disable with if(0) for development  

      }
  //dhc - END: development checkbox
    }
  }
  // END: if at least one row was returned, loop through each row  
  // END: if at least one row was returned, loop through each row  
  // END: if at least one row was returned, loop through each row  


variable_set('options', $options);

$earliest_new_reservationDisplay = date('g:ia \o\n l jS F Y', $earliest_new_reservation);
//krumo($earliest_new_reservationDisplay);

  variable_set('earliest_new_reservation', $earliest_new_reservation);  //dhc ?///??????

  // used to prevent rendering of the delete button if there are no existing reservations
  if(!$options){
    $sub_delete = FALSE;
  } else {
    $sub_delete = TRUE;
  }

  variable_set('lcnt', $lcnt);
// dhc: cannot seem to pass a hidden variable to the delete handler?? use global for now
//  // save number of items on reserve to use later in delete handler; see bug http://qa.drupal.org/pifr/test/281743
//  $form['myHidden']['lcnt'] = array(
//    '#type' => 'hidden',
//    '#value' => $lcnt,
//  );

  // this builds the rows with checkboxes
  $form['myselector12'] = array
  (
    '#type' => 'tableselect',
    '#title' => 'My Selector12',
    '#id' => 'form_p312',
    '#header' => $header,
    '#options' => $options,
    '#default_value' => $values,
//    '#values' => $values,
    '#empty' => t('No existing reservations'),
  );

  // if the business rules indicate that the user is not allowed to make a new reservation, or delete an old reservation, at this time, remove the option to delete any old reservations
  if( $myRow == 0 ){
    $form['myselector12'][0]['#disabled'] = true; // disable the row
    $form['submit'] = array(); // remove delete button array to prevent display of the delete button
  }

  if( $myDelete == 1 ){
    // create delete button to delete existing reservation(s) from Resource Scheduler by calling a web service from the handler
    $form['submit'] = array
    (
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('rc_res_full_form_page_three_delete_handler_submit'),
      '#access' => $sub_delete,
    );
  }
/////////////////////////////////////////// dhc: set disabled rows above
/////////////////////////////////////////// dhc: set disabled rows above
/////////////////////////////////////////// dhc: set disabled rows above

  
  // build the main part of the form
  $form_p3_main = array();
  $form_p3_main = array(

    // breadcrumbs (hardcoded for now)
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('<B>Your Reservations</B> > Date&Time > Available Resources > Details > Submit'),
    ),

    // main array
    $form['myselector12'],
    $form['submit'],
  );

  // check for maxed out reservations, add a "reservations are at a max" message to the form if necessary
  if (!empty($options)){
    $earliest_new_reservation_lim_gt_1 = strtotime($options[0]['startDate'])+24*3600;
  }

  $form_p3_maxed = array();
  if( ($myMax==1) && ($my_resv_lim>1) ){
    $form_p3_maxed = array(
      $form['description'] = array
      (
	'#type'  => 'item',
	'#title' => t('Only '.$my_resv_lim.' Reservation(s) allowed per '.$my_advance_days.' days - To make a new reservation please first delete an existing reservation or try again after '.date('g:ia \o\n l jS F Y',$earliest_new_reservation_lim_gt_1)),
      ),
    );
  }else  if( ($myMax==1) && ($my_resv_lim==1) ){ // NOTE: this is currently hardcoded for the undergraduate case, it needs to be expanded to handle all cases; dhc_change; fixed now?
    $form_p3_maxed = array(
      $form['description'] = array
      (
	'#type'  => 'item',
	'#title' => t('Only '.$my_resv_lim.' Reservation(s) allowed per 24 hours - To make a new reservation please try again after '.date('g:ia \o\n l jS F Y',$earliest_new_reservation_lim1)),
      ),
    );
  }

  // add the submit button, disable if reservations are at a max
  $form_p3_submit = array();

    // disable the submit button if this test is true
    if( $myNext == 0 ){
      $form_p3_submit = array(
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_full_form_page_three_handler_submit'),
	  '#disabled' => TRUE,
	),
      );
    }else{
      $form_p3_submit = array(
	$form['description'] = array(
	  '#type'  => 'item',
	  '#title' => t('Please click on the button to create a new reservation'),
	),

	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create a new reservation'),
	  '#submit' => array('rc_res_full_form_page_three_handler_submit'),
	  '#disabled' => FALSE,
	),
      );
    }

  // assemble the various for arrays into one array
  $form_p3 = array();
  $form_p3 = $form_p3_main;
  $form_p3[] = $form_p3_maxed;
  $form_p3[] = $form_p3_submit;
//  $form_p3[] = $form;

  // The rest of this function just places the above arrays in a context where
  // they can be rendered (hopefully attractively and usefully) on the page.
  $page_array = array();
  foreach ($form_p3 as $key => $item) {
    $page_array[$key]['#description'] = $key;
//    $page_array[$key]['hr'] = array('#markup' => '<hr/>');
    $page_array[$key]['rendered'] = array($item);
  }
  return $page_array;
//  return $page_array;
}

/**
 * page 4 ......................................................................................................................
 * page 4 ......................................................................................................................
 * page 4 ......................................................................................................................
 */
function rc_res_full_form_page_four($form, &$form_state) {
  // Build page 4.
  // Build page 4.
  // Build page 4.
  $GLOBALS['conf']['cache']=FALSE;
  global $user;
  $no_res_available = variable_get('no_res_available');

// drupal_set_message(t("User category: " . variable_get('rc_res_full_get_user_category') ));
// drupal_set_message(t("User ID: " . variable_get('working_uid') ));

//krumo($form_state['page_values']);

  $my_kvar = variable_get('rc_res_full_get_user_rules');
  // get the number of items the current category of user is allowed to reserve into the future - typically either 1 or 3
  $my_resv_lim = $my_kvar[0]['time_per'];


  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
    $default_date_time = $form_state['values']['date'];
  } else {
    $default_date_time = date("Y-m-d H:i:s", $_SERVER['REQUEST_TIME']);
    $default_date_time_min = date("i", $_SERVER['REQUEST_TIME']);
    $default_date_time_min = (int)$default_date_time_min;
    if($default_date_time_min <= 15 ){
      $default_date_time_min = 29;
      $string = $default_date_time;
      $pattern = '/:\d\d:/';
      $replacement = ':'.$default_date_time_min.':';
      $default_date_time = preg_replace($pattern, $replacement, $string);
    } else if($default_date_time_min >= 30 && $default_date_time_min <= 45){
      $default_date_time_min = 59;
      $string = $default_date_time;
      $pattern = '/:\d\d:/';
      $replacement = ':'.$default_date_time_min.':';
      $default_date_time = preg_replace($pattern, $replacement, $string);
    }
  }

  $form = array();
  $userDate = variable_get('userDate');
  $userDateTime = $userDate;
  $earliest_new_reservation = variable_get('earliest_new_reservation');

//krumo($earliest_new_reservation);

  // convert to old style to work under php 5.2.x
  $old_date_timestamp = strtotime($earliest_new_reservation);
  $earliest_new_reservation_time = date('g:ia', $earliest_new_reservation);
  $earliest_new_reservation_time_date = date('g:ia \o\n l jS F Y', $earliest_new_reservation);

//krumo($old_date_timestamp);
//krumo($earliest_new_reservation);
//krumo($earliest_new_reservation_time_date);

//print_r($earliest_new_reservation_time_date);


$nowDate = strtotime("now");
$maxDate = strtotime("now");
$nowDateDisplay = date('g:ia \o\n l jS F Y', $nowDate);

$earliest_new_reservationDisplay = date('g:ia \o\n l jS F Y', $earliest_new_reservation);

//$userDateTimeDisplay = date('g:ia \o\n l jS F Y', $userDateTime);
//krumo($userDateTime);
//krumo($userDateTimeDisplay);
//krumo($earliest_new_reservationDisplay);



  if ( $my_resv_lim == 1 ){
    $maxDate = strtotime("now".' +1 day');


  if( $userDateTime > $earliest_new_reservation){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <b>Please choose a start time within the next 24 hours</b><br>
		      (before ').$earliest_new_reservation_time_date.')'
    );
  }else if( $userDateTime < $nowDate){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <b>Please choose a start time within the next 24 hours</b><br>
		      (between now and ').$earliest_new_reservation_time_date.')'
    );
  }else{
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<BR>
		      <BR>
		      Start your reservation within the next 24 hours<BR>
		      <BR>
		      <b>Start before ').$earliest_new_reservation_time.' tomorrow</b> ('.$earliest_new_reservation_time_date.')'
    );
  }
  } else if ( $my_resv_lim > 1 ){

  // calculate legal reservation zones based on any existing reservations in the n-24 to n+168 interval
  $nm1 = 0;
  $zcnt = 0;
  $existing_resv = variable_get('lcnt');
  $options = variable_get('options');

  // if no reservation exists
  // if no reservation exists
  // if no reservation exists
  if( $existing_resv == 0 ){
    $zone[0] = strtotime("now");
    $zone[1] = strtotime("now".' +7 day');
    $maxDate = $zone[1];
//  } else if( $existing_resv == 1 ){
//    $zone[0] = strtotime( $options[0]['startDate'].' +1 day');
//    $zone[1] = strtotime("now".' +7 day');
    // $dzone = ($zone[1]-$zone[0])/(3600*24); // this is the zone within which a reservation may be made

  // else if one or more than one reservation exists and they are in the past and future OR just in the future
  // else if one or more than one reservation exists and they are in the past and future OR just in the future
  // else if one or more than one reservation exists and they are in the past and future OR just in the future
  } else {

    // calculate zones time within which a reservation can be made
    for ($i=0; $i<$existing_resv; $i++){
      $resvDate = strtotime($options[$i]['startDate']);
      if( $nm1 == 0 ){
	$nowDate = strtotime("now");
	if( ($resvDate-$nowDate) > (24*3600) ){
	  $zone[ $zcnt ] = strtotime("now");
	  $zcnt += 1;
	  $zone[ $zcnt ] = $resvDate - (24*3600);
	  $zcnt += 1;
	}
      }else if( $nm1 != 0 ){
	if( ($resvDate-$nm1) > (48*3600) ){
	  $zone[ $zcnt ] = $nm1 + (24*3600);
	  $zcnt += 1;
	  $zone[ $zcnt ] = $resvDate - (24*3600);
	  $zcnt += 1;
	}
      }
      $nm1 = $resvDate;
    }

    // check the last zone point through 7 days out from now
    $zone[$zcnt] = strtotime( $options[0]['startDate'].' +1 day');
    $zone[$zcnt+1] = strtotime("now".' +7 day');
    if( (strtotime("now".' +7 day') - $nm1) > (24*3600) ){
	  $zone[ $zcnt ] = $nm1 + (24*3600);
	  $zcnt += 1;
	  $zone[ $zcnt ] = strtotime("now".' +7 day');
	  $zcnt += 1;
    }
    // END - calculate zones time within which a reservation can be made  
  }

  // print out ranges for the user
  $zonePoints = sizeof( $zone );
  $i = 0;
  $zoneRange = '';
  while ($i < $zonePoints) {
    $zoneRangeNew = date('o-m-d  g:i A', $zone[$i]).' --- '.date('o-m-d  g:i A', $zone[$i+1]).'<br>';
//    $zoneRangeNew = date('g:ia D m/d/y', $zone[$i]).' --- '.date('g:ia D m/d/y', $zone[$i+1]).'<br>';
    $zoneRange = $zoneRange.$zoneRangeNew;
    $i+=2;
  }

  $firstAccess4 = variable_get('firstAccess4');
  $no_res_available = variable_get('no_res_available');
  if( $no_res_available == 1 ){
    variable_set('no_res_available', 0); // used to indicate that no reservations are available after submitting page 4

form_set_error('', 'There are no reservations available at the time you chose, please choose a different start time');

    $zones = 'Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <b>Please choose a start time in one of the following time slot(s)</b><br>
		      <br><b>'
		      .$zoneRange.'</b>';
  } else if( $firstAccess4 == 0 ){
    $zones = 'Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <em>Please choose a start time in one of the following time slot(s)</em><br>
		      <br>'
		      .$zoneRange;
  variable_set('firstAccess4', 1);
  } else if( $firstAccess4 > 0 ){

form_set_error('', 'Please choose a start time in one of the following time slot(s)<br>(reservations can be no more than 7 days into the future and must be at least 24 hours from any existing reservations)');

    $zones = 'Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <b>Please choose a start time in one of the following time slot(s)</b><br>
		      <br><b>'
		      .$zoneRange.'</b>';
  }

  if (!empty($zoneRange)) {  
//  if( $userDateTime > $earliest_new_reservation){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t($zones)
    );
  }else if( $userDateTime < $nowDate){
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
		      <br>
		      <b>Please choose a start time within the next 24 hours</b><br>
		      (between now and ').$earliest_new_reservation_time_date.')'
    );
  }else{
    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<BR>
		      <BR>
		      Start your reservation within the next 24 hours<BR>
		      <BR>
		      <b>Start before ').$earliest_new_reservation_time.' tomorrow</b> ('.$earliest_new_reservation_time_date.')'
    );
  }






//  if( $userDateTime > $earliest_new_reservation){
//    $form['description'] = array
//    (
//      '#type'  => 'item',
//      '#markup' => t('Your Reservations > <b>Date&Time</b> > Available Resources > Details > Submit<br>
//		      <br>
//		      <b>Please choose a start time at least 24 hours before/after any existing/previous reservations and no more than 7 days into the future 4</b><br>
//		      before ').$earliest_new_reservation_time_date.'<br>
//		      after '.$earliest_new_reservation_time_date
//    );
//  }

  }

  variable_set('maxDate', $maxDate);

//}
  
  $form['date'] = array(
    '#type' => 'date_popup', // Provided by the date_popup module
    '#default_value' => $default_date_time,
    '#date_format' => 'Y-m-d h:i A', // Uses the PHP date() format - http://php.net/manual/en/function.date.php
    '#date_year_range' => '0:+0.1', // Limits the year range to the next two upcoming years
    '#date_increment' => 30,
    '#required' => TRUE,
    '#date_label_position' => 'above',
  );

//  $form['reservation_type'] = array(
//    '#type' => 'radios',
//    '#options' => array(
//      '60'   => t('1 hour.'),
//      '90'   => t('1-1/2 hours.'),
//      '120'   => t('2 hours.'),
//    ),
//    '#title' => t('Select Reservation Length'),
//  );

// $form['res_length'] = array(
//    '#title' => t('Duration'),
//    '#type' => 'select',
//    '#options' => array(
//      60 => t('1 hour'),
//      90 => t('1 1/2 hours'),
//      120 => t('2 hours'),
//    ),
//  );

  $form['back3'] = array(
    '#type'  => 'submit',
    '#value' => t('Back'),
    '#submit' => array('rc_res_full_form_page_fourb_handler_submit'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Next'),
    '#submit' => array('rc_res_full_form_page_four_handler_submit'),
  );
  return $form;
} 

/**
 * page 5 ......................................................................................................................
 * page 5 ......................................................................................................................
 * page 5 ......................................................................................................................
 */
function rc_res_full_form_page_five($form, &$form_state) {
  // Build page 5.
  // Build page 5.
  // Build page 5.

// drupal_set_message(t("User category: " . variable_get('rc_res_full_get_user_category') ));
// drupal_set_message(t("User ID: " . variable_get('working_uid') ));

//krumo($form_state['values']);

  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

//krumo($form_state['values']);

  $form = array();

  // read reervations given an UID (currently simulated in drupal)
  $rows = array();
  $rows = rc_res_full_get_resources_for_period_complete($form, $form_state);

//  rc_res_full_set_user_reservations($working_uid);
  //rc_res_full_get_open_resources();


  $header = array
  (
    'title' => t('Title'),
//    'start' => t('Start'),
//    'end' => t('End'),
    'duration' => t('Max number of hours available'),
    'capacity' => t('Capacity'),
    'description' => t('Additional Info'),
  );

  // Initialize an empty array
  $options = array();
  // Next, loop through the $users array
  $lcnt = 0;

  if ($rows != "Not Found") {
  foreach($rows as $row)
    {
      $lcnt += 1;
      $o_index = $row['resources'][0]['id'].':::'.$row['start'].':::'.$row['end'].':::'.$row['resources'][0]['capacity'].':::'.$row['resources'][0]['title'].':::'.$row['resources'][0]['description'];
      $options[$o_index] = array // each element of the array is keyed with the PID
      (
	'title' => $row['resources'][0]['title'], // 'start_date' was the key used in the header
//	'start' => $row['start'], // 'start_date' was the key used in the header
//	'end' => $row['end'], // 'start_date' was the key used in the header
	'duration' => $row['duration'], // duration during which the resource is available
	'capacity' => $row['resources'][0]['capacity'], // 'start_time' was the key used in the header
	'description' => $row['resources'][0]['description'], // 'start_date' was the key used in the header
      );
    }
  }

  $demos0 = array();

  if ($rows != "Not Found") {

//print_r("NOT EMPTY");
  $dtimedate = $rows[0]['start']; // get start time from value(s) returned from the web service call

//krumo($form_state['page_values'][4]['date']);

  $dtime = preg_match( '/\d\d\d\d/', $dtimedate, $tyear ); // extract the numerical year
  $dtime = preg_match( '/-\d\d-/', $dtimedate, $tmonth ); // extract the numerical month
  $dtime = preg_match( '/\d\d/', $tmonth[0], $tmonth );
  $dtime = preg_match( '/-\d\d /', $dtimedate, $tday ); // extract the numerical day
  $dtime = preg_match( '/\d\d/', $tday[0], $tday );
  $dtime = preg_match( '/\d\d:/', $dtimedate, $thour ); // extract the numerical hour
  $dtime = preg_match( '/\d\d/', $thour[0], $thour );
  $dtime = preg_match( '/:\d\d/', $dtimedate, $tminute ); // extract the numerical minute
  $dtime = preg_match( '/\d\d/', $tminute[0], $tminute );
  $dtime = preg_match( '/.M/', $dtimedate, $apm ); // extract AM or PM

  // Convert to 24hr time for the date()
  $apms = strtolower($apm[0]);
  if( $apms == 'pm'){
    $thour[0] = $thour[0] + 12;
  }
  
  $ddyear = date("Y", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of year. "Y" yields 2012
  $ddmonth = date("M", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of month. "M" yields Jan through Dec
  $ddday = date("j", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of day. "j" yields 1 through 31 with no leading 0
  $dddow = date("l", mktime(0, 0, 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of Day of Week. "D" Monday through Sunday
  $ddhourmin = date("g:ia", mktime($thour[0], $tminute[0], 0, $tmonth[0], $tday[0], $tyear[0]));  // use date() to allow formatting of Day of Week. "D" Monday through Sunday

  $ddtime = preg_replace( '/\d\d\d\d-\d\d-\d\d/', '', $dtimedate );  // extract start time from value(s) returned from the web service call

  $demos0 = array(

    $form['description'] = array
    (
      '#type'  => 'item',
      '#markup' => t('Your Reservations > Date&Time > <B>Available Resources</B> > Details > Submit'),
    ),

    $form['description2'] = array
    (
      '#type'  => 'item',
      '#title' => t('Available Resources at ').$ddhourmin.t(' on '.$dddow.', '.$ddmonth.' '.$ddday),
    ),

    $form['table'] = array
    (
      '#id' => 'formformform2',
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#multiple' => FALSE,
      '#empty' => t('No available resources found'),
      '#default_value' => isset($form_state['values']['table']) ? $form_state['values']['table'] : NULL,
    ),

    $form['back4'] = array(
      '#type'  => 'submit',
      '#value' => t('Back'),
      '#submit' => array('rc_res_full_form_page_fiveb_handler_submit'),
    ),

    $form['submit'] = array
    (
      '#type' => 'submit',
      '#value' => t('Reserve selected resource'),
      '#submit' => array('rc_res_full_form_page_five_handler_submit'),
    ),
  );
  } else {

//print_r("EMPTY");

  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;

  $demos0 = array(
    $form['description'] = array
    (
      '#type'  => 'item',
      '#title' => t('Available Resources:'),
    ),

    $form['table'] = array
    (
      '#id' => 'formformform2',
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#multiple' => FALSE,
      '#empty' => t('No available resources found'),
    ),

    $form['back4'] = array(
      '#type'  => 'submit',
      '#value' => t('Back'),
      '#submit' => array('rc_res_full_form_page_fiveb_handler_submit'),
    ),

    $form['submit0'] = array
    (
      '#type' => 'submit',
      '#value' => t('Find spaces for earlier start times'),
      '#submit' => array('rc_res_full_form_page_five_empty_handler_submit'),
    ),

    $form['submit1'] = array
    (
      '#type' => 'submit',
      '#value' => t('Find spaces for later start times'),
      '#submit' => array('rc_res_full_form_page_five_empty_handler_submit_x'),
    ),

    $form['submit2'] = array
    (
      '#type' => 'submit',
      '#value' => t('Change Date and Time'),
      '#submit' => array('rc_res_full_form_page_five_empty_handler_submit'),
    ),

  );
  }
  return $form;
}

/**
 * page 6 ......................................................................................................................
 * page 6 ......................................................................................................................
 * page 6 ......................................................................................................................
 */
function rc_res_full_form_page_six($form, &$form_state) {

// drupal_set_message(t("User category: " . variable_get('rc_res_full_get_user_category') ));
// drupal_set_message(t("User ID: " . variable_get('working_uid') ));

//krumo($form_state['values']);

  if (!empty($form_state['page_values'][6])) {
    $form_state['values'] = $form_state['page_values'][6];
  }

//krumo($form_state['values']);

  $form = array();

  $form['description'] = array
  (
    '#type'  => 'item',
    '#markup' => t('Your Reservations > Date&Time > Available Resources > <B>Details</B> > Submit'),
  );

  $form['user_email'] = array(
    '#type'  => 'textfield',
    '#title' => t('Email'),
    '#size'  => 15,
    '#default_value' => isset($form_state['values']['user_email']) ? $form_state['values']['user_email'] : NULL,
  );

 $form['pnumber'] = array(
    '#title' => t('Number of participants'),
    '#type' => 'select',
    '#options' => array(
      2 => t('2'),
      3 => t('3'),
      4 => t('4'),
      5 => t('5'),
      6 => t('6'),
      7 => t('7'),
      8 => t('8'),
    ),
    '#default_value' => isset($form_state['values']['pnumber']) ? $form_state['values']['pnumber'] : NULL,
  );

  $form['res_length'] = array(
    '#title' => t('Duration'),
    '#type' => 'select',
    '#options' => array(
      60 => t('1 hour'),
      90 => t('1 1/2 hours'),
      120 => t('2 hours'),
    ),
  );

  $form['user_dept'] = array(
    '#type'  => 'textfield',
    '#title' => t('Department / Major'),
    '#size'  => 40,
    '#default_value' => isset($form_state['values']['user_dept']) ? $form_state['values']['user_dept'] : NULL,
  );

  $form['back5'] = array(
    '#type'  => 'submit',
    '#value' => t('Back'),
    '#submit' => array('rc_res_full_form_page_sixb_handler_submit'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('confirm'),
    '#submit' => array('rc_res_full_form_page_six_handler_submit'),
  );

  return $form;
}

/**
 * page 7 ......................................................................................................................
 * page 7 ......................................................................................................................
 * page 7 ......................................................................................................................
 */
function rc_res_full_form_page_seven($form, &$form_state) {

global $user;

// drupal_set_message(t("User category: " . variable_get('rc_res_full_get_user_category') ));
// drupal_set_message(t("User ID: " . variable_get('working_uid') ));
$working_uid = variable_get('working_uid');
  $str_create = array(
    'description' => 'testing ',
    'start' => '2012-12-25 02:00 PM',
    'end' => '2012-12-25 02:30 PM',
    'pending' => true,
    'numberOfAttendees' => 3,
    'email' => 'darrowco@library.ucla.edu',
    'phone' => '310-206-5565',
    'firstName' => 'Darrow',
    'lastName' => 'Cole',
    'academicDept' => 'Other',
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => 'Meeting',
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'Testing web service, I will delete',
    'uid' => '502673598',
  );

  $delimiter = ':::';
  $string = $form_state['page_values'][5]['table'];
  $sub_array = explode ( $delimiter, $string );
  $rrid = $sub_array[0];
  $rstart = $sub_array[1];
  $rend_oem = $sub_array[2]; // use later to compare $rend with $rstart+$res_length???
  $rcapacity = $sub_array[3];
  $rtitle = $sub_array[4];
  $rdescription = $sub_array[5];

//krumo($form_state['page_values']);

  $res_length = $form_state['page_values'][6]['res_length'];
  if ( $res_length == 60 ) {
    $res_length = 3600;
  } else if ( $res_length == 90 ) {
    $res_length = 5400;
  } else if ( $res_length == 120 ) {
    $res_length = 7200;
  } else {
    $res_length = 3600;
  }

  $rend = date('Y-m-d h:i A', strtotime($rstart)+$res_length);
  $rcap = $sub_array[3];
  $rcap = $form_state['page_values'][6]['pnumber'];
//  $ufname = $form_state['page_values'][1]['user_name'];
//  $ulname = $form_state['page_values'][1]['user_pwd'];
  $uemail = $form_state['page_values'][6]['user_email'];
  $udept = $form_state['page_values'][6]['user_dept'];
  $course_level = 0;


  $str_create1 = array(
    'description' => 'testing ',
    'start' => $rstart,
    'end' => $rend,
    'pending' => true,
    'numberOfAttendees' => $rcap,
    'email' => $uemail,
    'phone' => '310-206-5565',
    'firstName' => variable_get('name_first'),
    'lastName' => variable_get('name_last'),
    'academicDept' => $udept,
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => $course_level,
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'Testing web service, I will delete',
    'uid' => $working_uid,
//    'uid' => '603513612',
  );

  // create the new reservation
  rc_res_full_set_user_reservations($rrid, $str_create1);


  // send a confirmation email
  $dDate = 0;

  // re-read the user's reservations to catch anything new
  $rows = rc_res_full_get_user_reservations($working_uid);

  // if at least one row was returned, loop through each row  
  if (!empty($rows['reservation'])) {
    // set the email content, spacing and cr/lf effect the email layout
    $body = '
Research Commons Reservation Confirmation

';
    foreach($rows['reservation'] as $row) {
      // each element of the array is keyed with the lcnt
      $roomName = $row['roomName'];
      $startDate = strtotime($row['startDate']);
      $endDate = strtotime($row['endDate']);
      $schedID = $row['schedID'];
      $dDate = ($endDate-$startDate)/3600;
      $body = $body.' - '.$roomName.'
'.'   Date/Time: '.date('g:ia \o\n l jS F Y',$startDate).'
'.'   '.$dDate.' hour(s)

';
    }
  }

  $to = $user->mail;
  $from = 'darrowco@library.ucla.edu';
  // If you are using suhosin (the hardened PHP extension) and want to use
  // Cc or Bcc, then make sure that suhosin.mail.protect is not set to 2,
  // or the mail will be rejected as an attack.
  $header_bcc = '';
  $header_cc = '';
  $subject = 'Research Commons Reservation Confirmation';
  // you can set 'message_key' to any key you want, and process
  // that in the hook_mail as shown in the commented out code.
  // Or, just set it to some string and ignore it as we are here.
  // You can add extra headers into the headers array here.  If you
  // are trying to send an HTML formatted email, please use either
  // the MIME Mail or HTMLMail modules, rather than doing it
  // by just setting the Content-Type.
  $message = drupal_mail('rc_res_full', 'message_key', $to, user_preferred_language($user), array('body' => $body, 'subject' => $subject, 'headers' => array('Cc' => $header_cc, 'Bcc' => $header_bcc)), $from, TRUE);
  // You can check $message['result'] to see if the message sent successfully.

  $form = array();

  $form['description'] = array
  (
    '#type'  => 'item',
    '#markup' => t('Your Reservations > Date&Time > Available Resources > Details > <B>Submit</B>'),
  );

  $form['description2'] = array(
    '#type'  => 'item',
    '#title' => t('Success'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Make another reservation'),
    '#submit' => array('rc_res_full_form_page_seven_handler_submit'),
  );

  $form['view'] = array(
    '#type'  => 'submit',
    '#value' => t('View Reservation(s)'),
    '#submit' => array('rc_res_full_form_page_seven_handler_submit'),
  );
  return $form;

}

/**
 * Page 1 submit handler.
 *
 * Save the vals from page one for a later final submit.
 */
function rc_res_full_form_page_one_handler_submit($form, &$form_state) {

  $form_state['page_values'][1] = $form_state['values'];

  // set page num if it does not yet exist, ie this is the first pass
  if (empty($form_state['page_num'])) { $form_state['page_num'] = 1; } 

  // else go forward to page 2
  $form_state['page_num'] = 3;

  $form_state['rebuild'] = TRUE;
}

/**
 * Page 2 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_two_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
  $form_state['page_values'][2] = $form_state['values'];

  if (!empty($form_state['page_values'][3])) {
    $form_state['values'] = $form_state['page_values'][3];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 3 submit handler.
 *
 * Save the vals from page three for a later final submit.
 */
function rc_res_full_form_page_three_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
  $form_state['page_values'][3] = $form_state['values'];

  // zero out any previous choice by the user
  $userDate = array();
  variable_set('userDate', $userDate);

  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 3 delete handler.
 *
 * Save the vals from page three for a later final submit.
 */
function rc_res_full_form_page_three_delete_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.
    // delete any rows with set checkboxes from previous page
    foreach ($form_state['values'][0] as $pid_del) {
      // tableselect sets the checkbox vals to strings 0,1,2,... but to integer 0 if not selected so for element 0,
      //  the val is int 0 if not selected, string 0 if selected, the others are autoconverted
      if( ($pid_del == '0' && is_string($pid_del)) || $pid_del > 0 ){
	$working_rid = $form_state['complete form'][1]['rendered'][0]['#options'][$pid_del]['schedID'];
	$url_stack = "http://lit321v-b.library.ucla.edu/rcres/reservation/release/" . "$working_rid";
	$url = $url_stack;
	$response = drupal_http_request($url,
	  array(
	    'method' => 'DELETE',
	    'headers' => array('Pragma" => "no-cache', 'Cache-Control' => 'no-cache'),
	  )
	);
      }
    }


    $llcnt = 5;
//    $llcnt = variable_get('lcnt');

    for ($i=0; $i<$llcnt; $i++){
//      if (!empty($form_state['values'][0][$i])) {
//krumo($i);
	$form_state['values'][0][$i] = 0;
//	unset($form_state['values'][0][$i]);
//      }
    }

//$form_state['complete form']['values']['und'][0]['value']['#value'] = NULL;
//$form_state['complete form'][0]['rendered'][0][1]['#value'] = NULL;
//$form_state['complete form'][0]['rendered'][0][1]['#checked'] = FALSE;
//$form_state['complete form'][1]['rendered'][0][1]['#value'] = NULL;
//$form_state['complete form'][1]['rendered'][0][1]['#checked'] = FALSE;
//$form_state['complete form'][2]['rendered'][0][1]['#value'] = NULL;
//$form_state['complete form'][2]['rendered'][0][1]['#checked'] = FALSE;

$form_state['input'][0][0] = NULL;
$form_state['input'][0][1] = NULL;
$form_state['input'][0][2] = NULL;


  $form_state['page_values'][3] = $form_state['values']; // no reaseon to save, it only makes the check box sticky which is no desireable when the rows shift up after a deletion



  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;
}

/**
 * Page 4 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_four_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][4] = $form_state['values'];
  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

  // get the current time/date from server
  $nowDate = strtotime("now");

  // get the user's selection
  $userDate = strtotime($form_state['page_values'][4]['date']);

  // get the earliest legal reservation time
  $earliest_new_reservation = variable_get('earliest_new_reservation');

  // get the most distant legal reservation time
  $maxDate = variable_get('earliest_new_reservation');

  $too_close_flag = 0;
  $too_old_flag = 0;
  $too_new_flag = 0;
  $no_res_available_flag = 0;

  // read reervations given an UID (currently simulated in drupal)
  $rows = array();
  $rows = rc_res_full_get_resources_for_period_complete($form, $form_state);

if( $rows == 'Not Found' ){
  $no_res_available_flag = 1;
} else if( $userDate>$nowDate ){

    $existing_resv = variable_get('lcnt');
    $options = variable_get('options');
  for ($i=0; $i<$existing_resv; $i++){
      $resvDate = strtotime($options[$i]['startDate']);
      $ddate =  ($userDate - $resvDate)/(3600);
      $addate = abs($ddate);

      // is there an existing reservation with 24 hours of the newly proposed reservation?
      if($addate < 24 ){ // replace 24 with value from rules if/when the rule becomes group specific
	$too_close_flag = 1;
      } else if( $userDate > $maxDate ){
	$too_new_flag = 1;
      }
//      print_r($userDate." ");
//      print_r(date('g:ia \o\n l jS F Y', $userDate)."||");

//      print_r($resvDate." ");
//      print_r(date('g:ia \o\n l jS F Y', $resvDate)."||");

//      print_r($addate." ");
//      print_r(date('g:ia \o\n l jS F Y', $addate)."||"); // converts to hours not a date. hours should be less than max from rules table, currently 24 or 168

    }


//$userDateTimeDisplay = date('g:ia \o\n l jS F Y', $userDateTime);
//krumo($userDateTime);
//krumo($userDateTimeDisplay);
//krumo($earliest_new_reservationDisplay);

// END - if( $userDate>$nowDate )
  } else{
    $too_old_flag = 1;
  }



  // OLD is the user's selection time for a new reservation more that 24 hours into the future?
  // is the user's selection time for a new reservation too early or too close to an existing reservation? Is the too early part covered by the new too close test???
  if( $no_res_available_flag == 1 ){
    variable_set('no_res_available', 1);
    $form_state['page_num'] = 4;
    $form_state['rebuild'] = TRUE;
  } else if( $too_close_flag == 1 || $too_new_flag == 1 ){
//  if( $userDate < $earliest_new_reservation || $too_close_flag == 1){
  // save the user's selection time before looping back and asking for a new selection
    variable_set('userDate', $userDate);
    $form_state['page_num'] = 4;
    $form_state['rebuild'] = TRUE;
  }else if( $too_old_flag == 1 ){
    // the user's selection is ok, continue on to the next step
    // When form rebuilds in n+2 or so, use this to determine which page to build.
    $form_state['page_num'] = 4;
    $form_state['rebuild'] = TRUE;
  }else{
    // the user's selection is ok, continue on to the next step
    // When form rebuilds in n+2 or so, use this to determine which page to build.
    variable_set('firstAccess4', 0);
    $form_state['page_num'] = 5;
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Page 4 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_fourb_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][4] = $form_state['values'];

  if (!empty($form_state['page_values'][3])) {
    $form_state['values'] = $form_state['page_values'][3];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 3;
  $form_state['rebuild'] = TRUE;

//krumo($form_state['values']);

 }

/**
 * Page 5 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_five_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][5] = $form_state['values'];

  if (!empty($form_state['page_values'][5]['table'])) {
    if (!empty($form_state['page_values'][6])) {
      $form_state['values'] = $form_state['page_values'][6];
    }

    // When form rebuilds in n+2 or so, use this to determine which page to build.
    $form_state['page_num'] = 6;
    $form_state['rebuild'] = TRUE;
  } else {
    $form_state['page_num'] = 5;
    $form_state['rebuild'] = TRUE;
  }
 }

/**
 * Page 5 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_fiveb_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

//krumo($form_state['values']);

  $form_state['page_values'][5] = $form_state['values'];

  if (!empty($form_state['page_values'][4])) {
    $form_state['values'] = $form_state['page_values'][4];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;

//krumo($form_state['values']);

 }

/**
 * Page 5 empty submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_five_empty_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  if (!empty($form_state['page_values'][6])) {
    $form_state['values'] = $form_state['page_values'][6];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 4;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 6 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_six_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][6] = $form_state['values'];

//krumo($form_state);

  if (!empty($form_state['page_values'][7])) {
    $form_state['values'] = $form_state['page_values'][7];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 7;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 6 back submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_sixb_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][6] = $form_state['values'];

//krumo($form_state);

  if (!empty($form_state['page_values'][5])) {
    $form_state['values'] = $form_state['page_values'][5];
  }

  // When form rebuilds in n+2 or so, use this to determine which page to build.
  $form_state['page_num'] = 5;
  $form_state['rebuild'] = TRUE;
 }

/**
 * Page 7 submit handler.
 *
 * Save the vals from page two for a later final submit.
 */
function rc_res_full_form_page_seven_handler_submit($form, &$form_state) {
  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // The Forms API rebuilds the form.

  $form_state['page_values'][7] = $form_state['values'];

if (preg_match("/View/", $form_state['clicked_button']['#value'])) {
  $form_state['page_num'] = 3;
} else {
  $form_state['page_num'] = 1;
}
  $form_state['rebuild'] = TRUE;
 }







/**
 * Page X submit handler. //not used
 *
 * This is the final submit handler. Gather all the data together and save it to the db.
 * Also display it in a drupal_set_message() for development.
 */
function rc_res_full_form_page_X_handler_submit($form, &$form_state) {
  // Normally, some code would go here to alter the database with the data
  // collected from the form. Instead sets a message with drupal_set_message()
  // to validate that the code worked.
  $page_one_values = $form_state['page_values'][1];
  drupal_set_message(t('The form has been submitted. User Name = @user_name, User Password = @user_pwd',
  array('@user_name' => $page_one_values['user_name'], '@user_pwd' => $page_one_values['user_pwd'])));

  if (!empty($page_one_values['user_name2'])) {
    drupal_set_message(t('Second name: name="@user_name @user_pwd", year of birth=@year_of_birth',
    array('@user_name' => $page_one_values['first2'], '@user_pwd' => $page_one_values['last2'], '@year_of_birth' => $page_one_values['year_of_birth2'])));
  }
  drupal_set_message(t('Reservation type is @reservation_type', array('@reservation_type' => $form_state['values']['reservation_type'])));

  // If we wanted to redirect on submission, set $form_state['redirect']
  // $form_state['redirect'] = 'node'; // Redirects the user to /node.

  global $user;
  // Save the submitted entry.
  $entry = array(
    'user_name'    => $page_one_values['user_name'],
    'user_pwd' => $page_one_values['user_pwd'],
    'uid'     => $user->uid,
  );
  $return = rc_res_full_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Using UID = @entry", array('@entry' => print_r($entry['uid'], TRUE))));
  }
  $form_state['redirect'] = '';
}


/**
 * Submit handler for 'add entry' form.
 */
function rc_res_full_form_submit($form, &$form_state) {
  global $user;
  // Save the submitted entry.
  $entry = array(
    'uid'     => $user->uid,
  );
  $return = rc_res_full_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Using UID = @entry", array('@entry' => print_r($entry['uid'], TRUE))));
  }
  $form_state['redirect'] = '';
}

/**
 * add a rc-res user //not used
 */
function rc_res_full_add_user($form, &$form_state) {
  global $user;
  // Save the submitted entry.
  $entry = array(
    'user_name'    => $form_state['values']['user_name'],
    'user_pwd' => $form_state['values']['user_pwd'],
    'uid'     => $form_state['values']['user_uid'],
  );
  $return = rc_res_full_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Using UID = @entry", array('@entry' => print_r($entry['uid'], TRUE))));
  }
  $form_state['redirect'] = '';
  return 1;
}

/**
 * Sample UI to update a record. //not used
 */
function rc_res_full_form_update($form, &$form_state) {
  $form = array(
    '#prefix' => '<div id="updateform">',
    '#suffix' => '</div>',
  );

  $entries = rc_res_full_entry_load();
  $keyed_entries = array();
  if (empty($entries)) {
    $form['no_values'] = array(
      '#value' => t("No entries exist in the table rc_res_full table."),
    );
    return $form;
  }

  foreach ($entries as $entry) {
    $options[$entry->pid] = t("@pid: @user_name @user_pwd", array('@pid' => $entry->pid, '@user_name' => $entry->user_name, '@user_pwd' => $entry->user_pwd));
    $keyed_entries[$entry->pid] = $entry;
  }
  $default_entry = !empty($form_state['values']['pid']) ? $keyed_entries[$form_state['values']['pid']] : $entries[0];

  $form_state['entries'] = $keyed_entries;

  $form['pid'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Choose entry to update'),
    '#default_value' => $default_entry->pid,
    '#ajax' => array(
      'wrapper' => 'updateform',
      'callback' => 'rc_res_full_form_update_callback',
    ),
  );

  $form['user_name'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#size' => 15,
    '#default_value' => $default_entry->user_name,
  );

  $form['user_pwd'] = array(
    '#type' => 'textfield',
    '#title' => t('User Pwd'),
    '#size' => 15,
    '#default_value' => $default_entry->cls_pwd,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  return $form;
}

/**
 * AJAX callback handler for the pid select. //not used
 *
 * When the pid changes, populates the defaults from the database in the form.f
 */
function rc_res_full_form_update_callback($form, $form_state) {
  $entry = $form_state['entries'][$form_state['values']['pid']];
  // Setting the #value of items is the only way I was able to figure out
  // to get replaced defaults on these items. #default_value will not do it
  // and shouldn't.
  foreach (array('user_name', 'user_name') as $item) {
    $form[$item]['#value'] = $entry->$item;
  }
  return $form;
}

/**
 * Submit handler for 'update entry' form. //not used
 */
function rc_res_full_form_update_submit($form, &$form_state) {
  global $user;

  // Save the submitted entry.
  $entry = array(
    'pid' => $form_state['values']['pid'],
    'user_name' => $form_state['values']['user_name'],
    'user_pwd' => $form_state['values']['user_pwd'],
    'uid' => $user->uid,
  );
  $count = rc_res_full_entry_update($entry);
  drupal_set_message(t("Updated"));
}

/**
 * get the UID from shib based on user login values //not used
 */
function get_uid_from_shib($user_name, $user_pwd, $user_uid_temp) {

global $user;

// print_r("fffff");

// dhc - temp passes UID in username, version 1 is below: function get_uid_from_shib($user_name, $user_pwd) {
// dhc - need to make version 3 after shib works
  $uid_from_shib = 0;
  $uid_from_shib = $user_uid_temp;
  return $uid_from_shib;
}

/**
 * get the UID from shib based on user login values //not used
 */
function get_uid_from_shib_old($user_name, $user_pwd) {

global $user;
//print_r("fffff");

// dhc - get preset, temp UID from table, must set first???
// test for values at or before this point, validation?
  $uid_from_shib = 0;

  // read reervations given an UID (currently simulated in drupal)
  $entries = array();
  // select table
  $select = db_select('rc_res_full', 'e');
  // fields to read
  $select->addField('e', 'pid');
  $select->addField('e', 'uid');
  // read in only records that match te he current users uid
  $select->condition('e.user_name', $user_name);
  $select->condition('e.user_pwd', $user_pwd);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($entries)) {
    $rows = array();
    foreach ($entries as $entry) {
      // Sanitize the data before handing it off to the theme layer.
      $rows[] = array_map('check_plain', $entry);
    }
  // temp: drupal is taking place of shib
  $uid_from_shib = $rows[0]['uid'];
  }
  else {
    //drupal_set_message(t('No entries available for uid = ' . $user->uid));
    $uid_from_shib = -1;
  }
  return $uid_from_shib;
}

/**
 * get the UID from drupal because shib failed (using on user login values) //not used
 */
function get_uid_from_drupal($user_name, $user_pwd) {

global $user;
//print_r("ggggg");

  $uid_from_drupal = 0;

  // read reervations given an UID (currently simulated in drupal)
  $entries = array();
  // select table
  $select = db_select('rc_res_full', 'e');
  // fields to read
  $select->addField('e', 'pid');
  $select->addField('e', 'uid');
  // read in only records that match te he current users uid
  $select->condition('e.user_name', $user_name);
  $select->condition('e.user_pwd', $user_pwd);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($entries)) {
    $rows = array();
    foreach ($entries as $entry) {
      // Sanitize the data before handing it off to the theme layer.
      $rows[] = array_map('check_plain', $entry);
    }
  // temp: drupa; is taking place of shib
  $uid_from_drupal = $rows[0]['uid'];
  }
  else {
    //drupal_set_message(t('No entries available for uid = ' . $user->uid));
    $uid_from_drupal = -1;
  }
  return $uid_from_drupal;
}

/**
 * get the UID from drupal because shib failed (using on user login values) //not used
 */
function is_user_in_rc_res($user_name) {

global $user;
//print_r("hhhhh");

  $uid_from_drupal = 0;

  // read reervations given an UID (currently simulated in drupal)
  $entries = array();
  // select table
  $select = db_select('rc_res_full', 'e');
  // fields to read
  $select->addField('e', 'pid');
  $select->addField('e', 'uid');
  // read in only records that match te he current users uid
  $select->condition('e.user_name', $user_name);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($entries)) {
    $is_user_in_drupal = 1;
  }
  else {
    $is_user_in_drupal = -1;
  }
  return $is_user_in_drupal;
}

/**
 * check to find if pwd from form matches the pwd in the rc_res_full table
 */
function is_pwd_ok($user_pwd) {

global $user;
  // compare pwds (temporary)
  $entries = array();
  // select table
  $select = db_select('rc_res_full', 'e');
  // fields to read
  $select->addField('e', 'user_pwd');
  $select->addField('e', 'uid');  
// read in only records that match te he current users uid
  $select->condition('e.user_pwd', $user_pwd);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($entries)) {
    $rows = array();
    foreach ($entries as $entry) {
      // Sanitize the data before handing it off to the theme layer.
      $rows[] = array_map('check_plain', $entry);
    }
  // temp: drupa; is taking place of shib
  $uid_from_drupal = $rows[0]['uid'];
  }
  else {
    //drupal_set_message(t('No entries available for uid = ' . $user->uid));
    $uid_from_drupal = -1;
  }
  return $uid_from_drupal;
}

/**
 * @} End of "defgroup rc_res_full".
 */

/**
 * get user category from Voyager
 */
function rc_res_full_get_user_category($working_uid) {
  // get patron status from Voyager
  $url_stack = "http://lit321v-b.library.ucla.edu/rcres/patron/group/" . "$working_uid";
  $url = $url_stack . 
  drupal_http_build_query(array());
  $options = array(
    "headers" => array(
        "Pragma" => "no-cache",
        "Cache-Control" => "no-cache",
    ),
  );

  $response_voy = drupal_http_request($url, $options);
  $patron_status = $response_voy->data;
//dsm($patron_status);
  if (preg_match("/\bundergraduate\b/ii", $patron_status)) {
    $patron_status = "undergraduate";
  } elseif (preg_match("/\bgraduate\b/ii", $patron_status)) {
    $patron_status = "graduate";
  } elseif (preg_match("/\bfaculty\b/ii", $patron_status)) {
    $patron_status = "faculty";
  }
//dsm($patron_status);
  return $patron_status;
}

/**
 * get user rules from rules table
 */
function rc_res_full_get_user_rules($user_category) {
global $user;
  $uid_from_drupal = 0;
  // read reervations given an UID (currently simulated in drupal)
  $entries = array();
  // select table
  $select = db_select('rc_res', 'e');
  // fields to read
  $select->addField('e', 'cls_lim');
  $select->addField('e', 'gsr_lim');
  $select->addField('e', 'pod_lim');
  $select->addField('e', 'cls_adv');
  $select->addField('e', 'gsr_adv');
  $select->addField('e', 'pod_adv');
  $select->addField('e', 'multi_res');
  $select->addField('e', 'time_per');
  $select->addField('e', 'time_unit');
  $select->addField('e', 'group_verify');
    // read in only records that match te he current users uid
  $select->condition('e.user_group', $user_category);
  // Now, loop all these entries and show them in a table. Note that there is no
  // db_fetch_* object or array function being called here. Also note that the
  // following line could have been written as
  // $entries = $select->execute()->fetchAll() which would return each selected
  // record as an object instead of an array.
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($entries)) {
    $user_rules = $entries;
  }
  else {
    $user_rules = -1;
  }
  return $user_rules;

}


// /**
//  * Read from the database using a filter array.
//  *
//  */
// function rc_res_entry_load($entry = array()) {
//   // Read all fields from the rc_res table.
//   $select = db_select('rc_res', 'example');
//   $select->condition('user_group', 'Graduate');
//   $select->fields('example');
// 
//   // Add each field and value as a condition to this query.
//   foreach ($entry as $field => $value) {
//     $select->condition($field, $value);
//   }
//   // Return the result in object format.
//   return $select->execute()->fetchAll();
// }
























/**
 * get list of user reservations
 */
function rc_res_full_get_user_reservations($working_uid) {
  // get patron status from Voyager
  $url_stack = "http://lit321v-b.library.ucla.edu/rcres/currentreservations/for/" . "$working_uid";
  $url = $url_stack;
  $test = drupal_http_build_query(array());
  $options = array(
    "headers" => array(
        "Pragma" => "no-cache",
        "Cache-Control" => "no-cache",
    ),
  );

  $response_voy = drupal_http_request($url, $options);
  $patron_reservations = $response_voy->data;

  $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

//dsm($patron_status);
  return $patron_reservations_array;
}

/**
 * get list of available resources @ a start time
 */
function rc_res_full_get_open_resources_at_time() {
  // get patron status from Voyager

//  $time_string = "2012-09-07 08:00 AM/length/2";
//  $resource_string = urlencode($time_string);
  $url_stack = "http%3A%2F%2Flit321v-b.library.ucla.edu%2Frcres%2Favailablerooms%2Fstartingat%2F2012-09-10+06%3A00%3A00+PM%2Flength%2F2";
  $url = $url_stack;
  $test = drupal_http_build_query(array());
  $options = array(
    "headers" => array(
        "Pragma" => "no-cache",
        "Cache-Control" => "no-cache",
    ),
  );

  $response_voy = drupal_http_request($url, $options);

//krumo($url);
//krumo($response_voy);

  $patron_reservations = $response_voy->data;

  $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

//dsm($patron_status);
  return $patron_reservations_array;
}

/**
 * get list of available resources at starting time given start date/time
 */
function rc_res_full_get_resources_for_period($form, $form_state) {

// Set some parameters for sending request.

// test and setup string
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2013-01-17+07%3a00+PM/until/96/length/1';

  $delimiter = ' ';
  $string = $form_state['page_values'][4]['date'];
  $sub_array = explode ( $delimiter, $string );
  $rdate = $sub_array[0];

  $rtime = $sub_array[1];
  $rtime12h = date("h", strtotime($rtime));
  $rtime12m = date("i", strtotime($rtime));
  $rtime12a = date("a", strtotime($rtime));

  $rlength = 30; // temp, get from rules
//  $rlength = $form_state['page_values'][4]['res_length']; ===> now, 6: $rlength = $form_state['page_values'][6]['res_length'];
  $rlength =   $rlength/30;

//krumo($rdate);
//krumo($rtime12h);
//krumo($rtime12m);
//krumo($rtime12a);
//krumo($rlength);

$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/startingat/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/length/'."$rlength";
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/until/48/length/'."$rlength";
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2012-09-18+08%3a00+AM/until/48/length/3';
$request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
$request_method = 'POST';
$data = '';
$request_retry = 3;
// Send the request.
$response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

//krumo($response_voy);

  if ($response_voy->data == "[]" ) {
    return "Not Found";
  } else {
    $patron_reservations = $response_voy->data;
    $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

  //dsm($patron_status);
    return $patron_reservations_array;
  }
}

/**
 * get list of available resources at starting time given start date/time
 */
function rc_res_full_get_resources_for_period_complete($form, $form_state) {

// Set some parameters for sending request.

// test and setup string
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2013-01-17+07%3a00+PM/until/96/length/1';

  $delimiter = ' ';
  $string = $form_state['page_values'][4]['date'];
  $sub_array = explode ( $delimiter, $string );
  $rdate = $sub_array[0];

  $rtime = $sub_array[1];
  $rtime12h = date("h", strtotime($rtime));
  $rtime12m = date("i", strtotime($rtime));
  $rtime12a = date("a", strtotime($rtime));



  $my_kvar = variable_get('rc_res_full_get_user_rules');

//krumo($my_kvar);

  $my_kvar = $my_kvar[0]['pod_lim'];
  $rlength = $my_kvar/30;




//  $rlength = 120; // temp, get from rules
//  $rlength = $form_state['page_values'][4]['res_length']; ===> now, 6: $rlength = $form_state['page_values'][6]['res_length'];
//  $rlength =   $rlength/30;

//krumo($rdate);
//krumo($rtime12h);
//krumo($rtime12m);
//krumo($rtime12a);
//krumo($rlength);

$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/complete/startingat/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/length/'."$rlength";
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/until/48/length/'."$rlength";
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2012-09-18+08%3a00+AM/until/48/length/3';
$request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
$request_method = 'POST';
$data = '';
$request_retry = 3;
// Send the request.
$response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

//krumo($response_voy);

  if ($response_voy->data == "[]" ) {
    return "Not Found";
  } else {
    $patron_reservations = $response_voy->data;
    $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

  //dsm($patron_status);
    return $patron_reservations_array;
  }
}

/**
 * get list of available resources after starting time given start date/time and period
 */
function rc_res_full_form_page_five_empty_handler_submit_x($form, $form_state) {

// Set some parameters for sending request.

// test and setup string
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2013-01-17+07%3a00+PM/until/96/length/1';

  $delimiter = ' ';
  $string = $form_state['page_values'][4]['date'];
  $sub_array = explode ( $delimiter, $string );
  $rdate = $sub_array[0];

  $rtime = $sub_array[1];
  $rtime12h = date("h", strtotime($rtime));
  $rtime12m = date("i", strtotime($rtime));
  $rtime12a = date("a", strtotime($rtime));

  $rlength = 30; // temp, get from rules
//  $rlength = $form_state['page_values'][4]['res_length']; ===> now, 6: $rlength = $form_state['page_values'][6]['res_length'];
  $rlength =   $rlength/30;

//krumo($rdate);
//krumo($rtime12h);
//krumo($rtime12m);
//krumo($rtime12a);
//krumo($rlength);

//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/startingat/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/length/'."$rlength";
$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/'."$rdate"."+"."$rtime12h".'%3a'."$rtime12m".'+'."$rtime12a".'/until/48/length/'."$rlength";
//$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/after/2012-09-18+08%3a00+AM/until/48/length/3';
$request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
$request_method = 'POST';
$data = '';
$request_retry = 3;
// Send the request.
$response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

//krumo($response_voy);

  if ($response_voy->data == "[]" ) {
    return "Not Found";
  } else {
    $patron_reservations = $response_voy->data;
    $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

  //dsm($patron_status);
    return $patron_reservations_array;
  }
}

/**
 * get list of available resources after starting time, half hour increments on same day dhc works
 */
function rc_res_full_get_open_resources() {
  // get patron status from Voyager


// Set some parameters for sending request.
$request_url = 'http://lit321v-b.library.ucla.edu/rcres/availablerooms/startingat/2012-09-11+11%3a00+AM/length/2';
$request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
$request_method = 'POST';
$data = '';
$request_retry = 3;
// Send the request.
$response_voy = drupal_http_request($request_url, $request_headers, $request_method, $data, $request_retry);

//krumo($response_voy);

  $patron_reservations = $response_voy->data;
  $patron_reservations_array = drupal_json_decode($patron_reservations, TRUE);

//dsm($patron_status);
  return $patron_reservations_array;
}

/**
 * set new user reservations
 * set new user reservations
 * set new user reservations
 */
function rc_res_full_set_user_reservations($rrid, $str_create1) {

//krumo($str_create1);
//krumo($rrid);

  $params = array();
  $params = json_encode($str_create1);

  // right way to post data - Drupal 7
  $response = drupal_http_request('http://lit321v-b.library.ucla.edu/rcres/reservation/reserveroom/'.$rrid, array(
    'method' => 'POST',
    'data' => $params, // see comments below - you may need to change this
    'headers' => array('Content-Type' => 'application/json')
  ));

//print_r($response);

//  $response = drupal_http_request('http://lit321v-b.library.ucla.edu/rcres/reservation/reserveroom/1', $headers = array('Content-Type' => 'application/json'), $method = 'POST', $data = $params, $retry = 3);

//krumo($response);

}


// good 20120919, demo setting reservation
/**
 * set new user reservations - good 20120919
 */
function rc_res_full_set_user_reservations_0($working_uid) {

  $c_array = array(
    'description' => 'testing ',
    'start' => '2012-09-20 08:00 AM',
    'end' => '2012-09-20 10:00 AM',
    'pending' => true,
    'numberOfAttendees' => 2,
    'email' => 'darrowco@library.ucla.edu',
    'phone' => '310-206-9780',
    'firstName' => 'Darrow',
    'lastName' => 'Cole',
    'academicDept' => 'Other',
    'academicDeptOther' => 'Education',
    'division' => 'Staff',
    'courseLevel' => 'Meeting',
    'srs' => '111222333',
    'computerUse' => 'No',
    'internalNotes' => 'Testing web service, I will delete',
    'uid' => '502673598',
  );

  $params = json_encode($c_array);

  // right way to post data - Drupal 7
  $response = drupal_http_request('http://lit321v-b.library.ucla.edu/rcres/reservation/reserveroom/118', array(
    'method' => 'POST',
    'data' => $params, // see comments below - you may need to change this
    'headers' => array('Content-Type' => 'application/json')
  ));

//krumo($response);

}
// good 20120919



// store here temporarily
//  get go / no go from RS (resource scheduler



function send_data_form_submit($form, &$form_state) {

    $name = $form_state['values']['name'];
    $email = $form_state['values']['email'];

    $attendee = array(
        'name' => urlencode($name),
        'email' => urlencode($email)
    );

    $attendee = http_build_query($attendee, '', '&');

    $url_login = 'http://[ip]/eventmobile/users/sign_in';
    $url_target = 'http://[ip]/eventmobile/attendee_management/attendee';

    $use  = array(
      'email' => 'root@root.com',
      'password' => '123456'
    );
    $user = http_build_query($use, '', '&');

    $headers = array('Content-Type' => 'application/x-www-form-urlencoded');

    $method = 'POST';

    $result_1 = drupal_http_request(url($url_login, array(absolute => true)), $headers, $method, $user); //I get a http_code = 200. OK
    $result_2 = drupal_http_request(url($url_target,array(absolute => true)), $headers, $method, $attendee); // I get a http_code = 500. Internal Server Error
}


function rc_res_block_info() {
  $blocks['recent444'] = array(
    'info' => t('Recent conten444'),
    'region' => 'content',



    // DRUPAL_CACHE_PER_ROLE will be assumed.
  );

  return $blocks;
}


function rc_res_full_mail($key, &$message, $params) {
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
}
  